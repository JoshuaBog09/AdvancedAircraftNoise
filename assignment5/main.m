% Assignment 5: Advanced Aircraft Noise

clear;

%% Import data from text file
% Script for importing data from the following text file:
%
%    filename: Array\Array.txt
%
% Auto-generated by MATLAB on 16-Feb-2024 14:20:26

% Set up the Import Options and import the data
opts = delimitedTextImportOptions("NumVariables", 3);

% Specify range and delimiter
opts.DataLines = [1, Inf];
opts.Delimiter = "\t";

% Specify column names and types
opts.VariableNames = ["VarName1", "VarName2", "VarName3"];
opts.VariableTypes = ["double", "double", "double"];

% Specify file level properties
opts.ExtraColumnsRule = "ignore";
opts.EmptyLineRule = "read";

% Import the data
Array = readtable("Array\Array.txt", opts);

% Convert to output type
Array = table2array(Array);

% Clear temporary variables
clear opts

load('Array\aircraft_noise_data_overhead_2020.mat');

h = 64.87;      % [m]
fs = 40000;     % [Hz]
n_mic = 32;     % [-]
c = 343;        % [m/s]
p_ref = 2e-5;   % [Pa]

x_mic = Array(:,2);
y_mic = Array(:,3);

%% Main code

figure();
plot(x_mic, y_mic, "o");
hold on
axis equal
% add circle https://stackoverflow.com/a/29194105
pos = [[0 0]-1 2 2];

rectangle('Position',pos,'Curvature',[1 1]);

resolution = 0.5;  % [m]

X = -25:resolution:25;
Y = -25:resolution:25;

X_size = size(X,2);
Y_size = size(Y,2);

J = zeros(X_size*Y_size, 2);
id = 1;

for X_loc = X
    for Y_loc = Y
        J(id,:) = [X_loc, Y_loc];
        id = id + 1; 
    end
end

scanning_plane = zeros(X_size, Y_size);

%% BeamForming

microphone = 1;

T = 0.05;
N = length(p(microphone,:));
delta_t = T / N;
fs = 1 / delta_t;
delta_f = 1 / T;

% [S,F,T,P] = spectrogram(p(microphone,:), N, 0, N, fs, 'yaxis');

row = 0;
final = zeros(length(J),1000);

for j = 1:length(J)

    % disp(j);
    
    inter = zeros(1, 1000); %Storage of results for a single stearing angle but all frequencies
    row = row + 1;
    
    for microphone = 1:n_mic
        
        d_mic = p(microphone,:);     % Microphone data of microphone n
        
        [S,F,T,P] = spectrogram(d_mic, N, 0, N, fs, 'yaxis');
        
        r = sqrt((x_mic(microphone) - J(j,1))^2 + (y_mic(microphone) - J(j,2))^2 + h^2);
        
        inter = inter + S.' .* exp(-2*pi*1i*F.'*(r/c)) / r;
    end
    
    inter = 10*log10((abs(inter).^2)/(p_ref^2));    % Convert to dB
    
    final(row,:) = inter;                           % append to solution...
end

%% Plot results

final_cohorent = zeros(length(J),1);
% 
for j = 1:length(J)
    final_cohorent(j) = sum(final(j,:))/length(F);
end

% reconstruct grid

Beamformed_grid = zeros(X_size, Y_size);

for x_id = 1:X_size
    for y_id = 1:Y_size
        Beamformed_grid(x_id, y_id) = final_cohorent(x_id*y_id);
    end
end

imagesc(X, Y, Beamformed_grid)